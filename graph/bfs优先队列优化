#include<iostream>
#include<vector>
#include<queue>

using namespace std;

struct cmp {
	auto operator()(pair<int, int>& p1, pair<int, int>& p2) const {
		return p1.second > p2.second;
	}
};

int n, m;
vector<vector<pair<int, int>>> edges;
priority_queue <pair<int, int>, vector<pair<int, int>>, cmp> que;
vector<int> dis;

int main() {

	cin >> n >> m;

	edges.resize(n + 1);
	dis.resize(n + 1, 0x3f3f3f3f);

	for (int i = 0; i < m; ++i) {
		int x, y, z;
		cin >> x >> y >> z;
		edges[x].emplace_back(y, z);
	}

	que.emplace(1, 0);

	while (!que.empty()) {
		auto [from, tot_cost] = que.top();
		que.pop();
		if (dis[from] == 0x3f3f3f3f) {
			dis[from] = tot_cost;
			for (auto& [to, cost] : edges[from]) {
				if(dis[to] == 0x3f3f3f3f) que.emplace(to, cost + tot_cost);
			}
		}
	}
	cout << (dis[n] == 0x3f3f3f3f ? -1 : dis[n]) << endl;
}
